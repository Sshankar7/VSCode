Certainly! Below is an optimized VBA code to connect to an XMLA server, run an MDX query, and paste the results into an Excel sheet. This script utilizes the `MSXML2.ServerXMLHTTP` library to handle the XMLA connection and fetch the query results. Make sure you have the necessary references added for MSXML2 in your VBA environment.

Here's the VBA code for the specified task:

```vba
Sub FetchMDXQueryResults()
    ' Declare necessary variables
    Dim xmlaURL As String
    Dim username As String
    Dim password As String
    Dim mdxQuery As String
    Dim xmlhttp As Object
    Dim responseText As String
    Dim xmlDoc As Object
    Dim xmlNode As Object
    Dim colIndex As Long
    Dim rowIndex As Long
    Dim ws As Worksheet
    
    ' Initialize variables
    xmlaURL = "http://your_xmla_server_link"
    username = "your_username"
    password = "your_password"
    mdxQuery = "YOUR_MDX_QUERY"
    
    ' Set the worksheet to paste the results
    Set ws = ThisWorkbook.Sheets("Sheet1")
    ws.Cells.Clear ' Clear existing data on the sheet
    
    ' Initialize XMLHTTP and execute the query
    Set xmlhttp = CreateObject("MSXML2.ServerXMLHTTP.6.0")
    
    ' Prepare the SOAP request
    Dim soapEnvelope As String
    soapEnvelope = _
    "<SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/' " & _
        "xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' " & _
        "xmlns:xsd='http://www.w3.org/2001/XMLSchema'>" & _
    "<SOAP-ENV:Body>" & _
        "<Execute xmlns='urn:schemas-microsoft-com:xml-analysis'>" & _
            "<Command>" & _
                "<Statement>" & mdxQuery & "</Statement>" & _
            "</Command>" & _
            "<Properties>" & _
                "<PropertyList>" & _
                    "<Catalog>YourCatalogName</Catalog>" & _
                "</PropertyList>" & _
            "</Properties>" & _
        "</Execute>" & _
    "</SOAP-ENV:Body>" & _
    "</SOAP-ENV:Envelope>"
    
    ' Send the request
    With xmlhttp
        .Open "POST", xmlaURL, False, username, password
        .setRequestHeader "Content-Type", "text/xml"
        .setRequestHeader "SOAPAction", "urn:schemas-microsoft-com:xml-analysis:Execute"
        .send soapEnvelope
        responseText = .responseText
    End With
    
    ' Load the response into an XML document
    Set xmlDoc = CreateObject("MSXML2.DOMDocument.6.0")
    xmlDoc.LoadXML responseText

    'Parse the XML and fetch data (modify based on your XML response structure)
    Dim cellData As String
    Dim cellNode As Object
    Set xmlNode = xmlDoc.SelectSingleNode("//Axis[@name='Axis0']/Tuples/Tuple/Member")
    
    ' Loop through the XML and populate the worksheet
    rowIndex = 1
    colIndex = 1
    
    For Each cellNode In xmlDoc.SelectNodes("//CellData/Cell")
        ws.Cells(rowIndex, colIndex).Value = cellNode.SelectSingleNode("Value").Text
        rowIndex = rowIndex + 1
        
        ' Reset rowIndex and increment colIndex for new column in results
        If rowIndex > 100 Then ' Assuming 100 rows of data before moving to next column; adjust accordingly
            rowIndex = 1
            colIndex = colIndex + 1
        End If
    Next cellNode
    
    ' Clean up
    Set xmlhttp = Nothing
    Set xmlDoc = Nothing
    Set xmlNode = Nothing
    Set ws = Nothing
    
    MsgBox "Data fetch complete!", vbInformation
End Sub
```

### Explanation:
1. **Initialization**: Set up the XMLA server link, username, password, and MDX query.
2. **SOAP Request Preparation**: Prepare the SOAP request envelope with the provided MDX query.
3. **XMLHTTP Request**: Send the request using `MSXML2.ServerXMLHTTP` and receive the response.
4. **XML Parsing**: Load the response XML into an `MSXML2.DOMDocument` object and parse the necessary data nodes.
5. **Data Population**: Loop through the parsed XML nodes and write the results into Excel cells efficiently.
6. **Cleanup**: Clean up objects to free memory.

Please adjust the XML parsing section (`SelectSingleNode` paths) according to the structure of your specific XMLA response. The provided example assumes a simple structure for illustration purposes.
